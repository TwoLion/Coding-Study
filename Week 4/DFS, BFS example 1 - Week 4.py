# 문제

# N X M 크기의 얼음틀이 있습니다. 구멍이 뚫려 있는 부분은 0, 칸막이가 존재하는 부분은 1로 표시됩니다.
# 구멍이 뚫려 있는 부분끼리 상, 하, 좌, 우로 붙어 있는 경우 서로 연결되어 있는 것으로 간주합니다.
# 이때 얼음 틀의 모양이 주어졌을 때 생성되는 총 아이스크림의 개수를 구하는 프로그램을 작성하세요.


# 입력 : 첫 번째 줄에 얼음 틀의 세로 길이 N과 가로 길이 M이 주어집니다. (1<=N, M<=1000)
# 두 번째 줄부터 N+1번째 줄까지 얼음 틀의 형태가 주어집니다.
# 이 때 구벙이 뚫려있는 부분은 0, 그렇지 않은 부분은 1입니다.

# 출력 : 한 번에 만들 수 있는 아이스크림의 개수를 출력합니다.

# idea : 상하좌우로 연결된 노드는 인접한 노드로 생각할 수 있음
# 모든 위치에 대해서 방문 처리하기 : 0에 대해서만 이동, 1은 이동 불가능

# DFS 활용 알고리즘
# 특정한 지점의 주변 상, 하, 좌, 우를 살펴본 뒤에 주변 지점 중에서 값이 0이면서 아직 방문하지 않은 지점이 있다면 해당 지점 방문
# 방문한 지점에서 다시 상, 하, 좌, 우를 살펴보면서 방문 진행하는 과정 반복
# 모든 노드에 대하여 1, 2번의 과정을 반복, 방문하지 않은 지점의 수를 카운트

n, m = map(int, input().split())

graph = []
for i in range(n):
    graph.append(list(map(int, input().split())))


def dfs(x, y):
    # 주어진 범위를 벗어나는 경우에는 즉시 종료
    if x<=-1 or x>=n or y<=-1 or y>=m:
        return False
    if graph[x][y] == 0 :
        graph[x][y] =1
        
        # 근처 연결된 0을 1로 바꾸어주는 작업

        dfs(x-1, y)
        dfs(x, y-1)
        dfs(x+1, y)
        dfs(x, y+1)
        
        # 현재 자리 블록이기 때문에 true값 부여
        return True
    return False

result = 0
for i in range(n):
    for j in range(m):
        if dfs(i, j)==True:
            result +=1



